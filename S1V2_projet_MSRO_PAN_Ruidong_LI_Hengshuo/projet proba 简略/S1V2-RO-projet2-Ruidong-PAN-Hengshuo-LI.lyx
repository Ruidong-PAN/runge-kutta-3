#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 1
\use_minted 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Simulation d'une loi gaussienne
\end_layout

\begin_layout Author
Ruidong PAN & Hengshuo LI
\end_layout

\begin_layout Part*
Introduction
\end_layout

\begin_layout Standard
Tous les langages de programmation possèdent un générateur de nombres pseudo-ale
atoires qui suit la loi uniforme sur l'interval 
\begin_inset Formula $[0,1]$
\end_inset

 .
 Le but de ce projet est de simuler une loi gaussienne en utilisant deux
 variables aléatoires uniformes sur 
\begin_inset Formula $[0,1]$
\end_inset

 independantes pour générer de nombres pseudo-aleatoires qui suit la loi
 
\begin_inset Formula $N(0;1)$
\end_inset

.
\end_layout

\begin_layout Part*
Partie théorique 
\end_layout

\begin_layout Standard
Soient 
\begin_inset Formula $U$
\end_inset

 et 
\begin_inset Formula $V$
\end_inset

 deux variables aléatoires uniformes sur 
\begin_inset Formula $[0,1]$
\end_inset

 independantes:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{U}(u)=\begin{cases}
1 & u\in\left[0,1\right]\\
0 & sinon
\end{cases}\qquad f_{V}(v)=\begin{cases}
1 & v\in\left[0,1\right]\\
0 & sinon
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
alors 
\begin_inset Formula $X=\sqrt{-2log(u)}cos(2\pi V)$
\end_inset

 et 
\begin_inset Formula $Y=\sqrt{-2log(u)}sin(2\pi V)$
\end_inset

 sont variables aléatoires indépendantes et de la loi 
\begin_inset Formula $N(0;1)$
\end_inset

.
\end_layout

\begin_layout Section*
Preuve
\end_layout

\begin_layout Standard
Soient 
\begin_inset Formula $X$
\end_inset

 et 
\begin_inset Formula $Y$
\end_inset

 deux variables aléatoires indépendantes avec 
\begin_inset Formula $X\sim N(0;1)$
\end_inset

 et 
\begin_inset Formula $Y\sim N(0;1)$
\end_inset

, alors on a
\begin_inset Formula 
\[
p(X,Y)\overbrace{=}^{indépendantes}p(X)\times p(Y)=\frac{1}{\sqrt{2\pi}}e^{-\frac{X^{2}}{2}}\times\frac{1}{\sqrt{2\pi}}e^{-\frac{Y^{2}}{2}}=\frac{1}{2\pi}e^{-\frac{X^{2}+Y^{2}}{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
En Transformant par coordonnées polaires avec 
\begin_inset Formula $X=Rcos\theta$
\end_inset

 et 
\begin_inset Formula $Y=Rsin\theta$
\end_inset

 où 
\begin_inset Formula $\theta\in[0,2\pi]$
\end_inset

, on obtient :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{1}{2\pi}e^{-\frac{X^{2}+Y^{2}}{2}}=\frac{1}{2\pi}e^{-\frac{R^{2}}{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
Or on sait que : 
\begin_inset Formula $\iint_{D}f(x,y)dxdy=\int_{\beta}^{\alpha}d\theta\int_{\rho_{1}(\theta)}^{\rho_{2}(\theta)}f(\rho cos\theta,\rho sin\theta)\rho d\rho$
\end_inset


\end_layout

\begin_layout Standard
Alors on a : 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\frac{1}{2\pi}e^{-\frac{X^{2}+Y^{2}}{2}}dXdY=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}\frac{1}{2\pi}e^{-\frac{R^{2}}{2}}Rd\theta dR=1
\]

\end_inset


\end_layout

\begin_layout Standard
On a donc aussi la fonction de répartition pour 
\begin_inset Formula $R$
\end_inset

 et 
\begin_inset Formula $\theta$
\end_inset

 :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F_{R}(R\leqslant r)=\int_{0}^{r}\int_{0}^{2\pi}\frac{1}{2\pi}e^{-\frac{R^{2}}{2}}Rd\theta dR
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\qquad\quad\quad=\int_{0}^{r}\left(\int_{0}^{2\pi}\frac{1}{2\pi}Re^{-\frac{R^{2}}{2}}d\theta\right)dR
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\int_{0}^{r}Re^{-\frac{R^{2}}{2}}dR
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\qquad\quad=-\left[e^{-\frac{R^{2}}{2}}\right]_{0}^{r}=1-e^{-\frac{r^{2}}{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F_{\theta}(\theta\leqslant\phi)=\int_{0}^{\phi}\int_{0}^{\infty}\frac{1}{2\pi}e^{-\frac{R^{2}}{2}}Rd\theta dR
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\int_{0}^{\phi}\left(\int_{0}^{\infty}\frac{1}{2\pi}Re^{-\frac{R^{2}}{2}}dR\right)d\theta
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\int_{0}^{\phi}\frac{1}{2\pi}\left[-e^{-\frac{R^{2}}{2}}\right]_{0}^{\infty}d\theta
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
=\int_{0}^{\phi}\frac{1}{2\pi}d\theta=\frac{\phi}{2\pi}
\]

\end_inset


\end_layout

\begin_layout Standard
Soient 
\begin_inset Formula $U_{1}$
\end_inset

 et 
\begin_inset Formula $U_{2}$
\end_inset

 deux variables aléatoires independantes uniformes sur 
\begin_inset Formula $[0,1]$
\end_inset

, on peut prendre 
\begin_inset Formula $\theta=2\pi U_{2}$
\end_inset

, car 
\begin_inset Formula $F_{\theta}(\theta\leqslant\phi)=\frac{\phi}{2\pi}$
\end_inset

, 
\begin_inset Formula $\theta$
\end_inset

 est uniformes sur 
\begin_inset Formula $[0,2\pi]$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $F_{R}(R\leqslant r)=1-e^{-\frac{r^{2}}{2}}$
\end_inset

 donc on peut obtenir 
\begin_inset Formula $R=F_{R}^{-1}(z)=\sqrt{-2ln(1-z)}$
\end_inset

, d'après la méthode de la transformée inverse, la variable aléatoire 
\begin_inset Formula $R=F_{R}^{-1}(z)$
\end_inset

 a pour fonction de répartition 
\begin_inset Formula $F_{R}(R\leqslant r)$
\end_inset

, où 
\begin_inset Formula $z$
\end_inset

 est une variable aléatoire de loi uniforme sur 
\begin_inset Formula $[0;1]$
\end_inset

.
 Or si 
\begin_inset Formula $z$
\end_inset

 est uniforme, alors 
\begin_inset Formula $(1-z)$
\end_inset

 est aussi uniforme.
 Pour notre cas, 
\begin_inset Formula $z$
\end_inset

 est uniforme sur 
\begin_inset Formula $[0,1]$
\end_inset

, donc 
\begin_inset Formula $(1-z)$
\end_inset

 est aussi uniforme sur 
\begin_inset Formula $[0,1]$
\end_inset

.
 Et on peut prendre 
\begin_inset Formula $U_{1}=(1-z)$
\end_inset

.
\end_layout

\begin_layout Standard
Enfin, on peut obtenir 
\begin_inset Formula $X=Rcos\theta=\sqrt{-2lnU_{1}}cos(2\pi U_{2})$
\end_inset

 et 
\begin_inset Formula $Y=Rsin\theta=\sqrt{-2lnU_{1}}sin(2\pi U_{2})$
\end_inset

 où 
\begin_inset Formula $X$
\end_inset

 et 
\begin_inset Formula $Y$
\end_inset

 sont deux variables aléatoires indépendantes de la loi 
\begin_inset Formula $N(0;1)$
\end_inset

.
\end_layout

\begin_layout Standard
Donc on peut conclure que on n'a besoin que de deux variables aléatoires
 independantes 
\begin_inset Formula $U_{1}$
\end_inset

 et 
\begin_inset Formula $U_{2}$
\end_inset

 qui suivent la loi uniforme sur 
\begin_inset Formula $[0,1]$
\end_inset

, alors on peut obtenir une variable aléatoire de la loi 
\begin_inset Formula $N(0;1)$
\end_inset

 soit par la formule 
\begin_inset Formula $\sqrt{-2lnU_{1}}cos(2\pi U_{2})$
\end_inset

 soit par 
\begin_inset Formula $\sqrt{-2lnU_{1}}sin(2\pi U_{2})$
\end_inset

.
 Cette conclusion s'appelle aussi la méthode de la transformation de Box-Muller.
\end_layout

\begin_layout Standard
CQFD.
\end_layout

\begin_layout Part*
Partie appliquée avec le code
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#include <stdlib.h> 
\end_layout

\begin_layout Plain Layout

#include <stdio.h> 
\end_layout

\begin_layout Plain Layout

#include <math.h> 
\end_layout

\begin_layout Plain Layout

#define PI 3.14159265358979323846   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  double gaussrand_normal()  
\end_layout

\begin_layout Plain Layout

 {    
\end_layout

\begin_layout Plain Layout

  static double U,V;    
\end_layout

\begin_layout Plain Layout

  static int phase=0;    
\end_layout

\begin_layout Plain Layout

  double Z,x,y;    
\end_layout

\begin_layout Plain Layout

  if (phase==0)    
\end_layout

\begin_layout Plain Layout

 {          
\end_layout

\begin_layout Plain Layout

  U=rand()/(RAND_MAX+1.0);      
\end_layout

\begin_layout Plain Layout

  V=rand()/(RAND_MAX+1.0);      
\end_layout

\begin_layout Plain Layout

  Z=sqrt(-2*log(U))*sin(2*PI*V);    
\end_layout

\begin_layout Plain Layout

 }    
\end_layout

\begin_layout Plain Layout

  else      
\end_layout

\begin_layout Plain Layout

  Z=sqrt(-2*log(U))*cos(2*PI*V);    
\end_layout

\begin_layout Plain Layout

  phase = 1-phase;    
\end_layout

\begin_layout Plain Layout

  return Z ; 
\end_layout

\begin_layout Plain Layout

 }      
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

  double  gaussrand(double mean, double stdc)  
\end_layout

\begin_layout Plain Layout

 {  
\end_layout

\begin_layout Plain Layout

   return mean + gaussrand_normal() * stdc;  
\end_layout

\begin_layout Plain Layout

 }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  int main() 
\end_layout

\begin_layout Plain Layout

{  
\end_layout

\begin_layout Plain Layout

  double a,b, data = 0;    
\end_layout

\begin_layout Plain Layout

  printf("saisi esperance et variance:");
\end_layout

\begin_layout Plain Layout

  scanf("%lf%lf",&a,&b);  
\end_layout

\begin_layout Plain Layout

   for(int i=0; i<100; i++)  //Si nous décidons de générer 100 nombres
\end_layout

\begin_layout Plain Layout

  {   
\end_layout

\begin_layout Plain Layout

   data = gaussrand(a, b);   
\end_layout

\begin_layout Plain Layout

   if (i%10==0)   
\end_layout

\begin_layout Plain Layout

    {   
\end_layout

\begin_layout Plain Layout

      printf("
\backslash
n");   
\end_layout

\begin_layout Plain Layout

      printf("%lf  ", data);  
\end_layout

\begin_layout Plain Layout

    }   
\end_layout

\begin_layout Plain Layout

   else   
\end_layout

\begin_layout Plain Layout

      printf("%lf  ", data);  
\end_layout

\begin_layout Plain Layout

  }  
\end_layout

\begin_layout Plain Layout

 return 0; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
D'après le code, nous obtenons par exemple :
\end_layout

\begin_layout Standard
Les nombres pseudo-aleatoires qui suit la loi 
\begin_inset Formula $N(0;1)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename normal_0_1.png
	width 15cm

\end_inset


\end_layout

\begin_layout Standard
Les nombres pseudo-aleatoires qui suit la loi 
\begin_inset Formula $N(1;3)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename normal_1_3.png
	width 15cm

\end_inset


\end_layout

\begin_layout Section*
Vérification des données
\end_layout

\begin_layout Standard
Nous commençons maintenant à vérifier si ces données satisfont à la distribution
 normale.
 Évidemment, 100 données est loin d'être suffisante, donc nous décidons
 de générer 5000 nombres pseudo-aleatoires.
 A l'aide de matlab, nous obtenons l'histogramme de distribution des données:
\end_layout

\begin_layout Standard
Pour la loi 
\begin_inset Formula $N(0;1)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename norm_0_1.jpg
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
Ce graphique est très similaire à l'histogramme de distribution normale
 standard, donc il montre que les nombres pseudo-aleatoires qui suit la
 loi 
\begin_inset Formula $N(0;1)$
\end_inset

 bien satisfont à la loi 
\begin_inset Formula $N(0;1)$
\end_inset

.
\end_layout

\begin_layout Standard
Pour la loi 
\begin_inset Formula $N(1;3)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename norm_1_3.jpg
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
De même, nous pouvons aussi conclure que les nombres pseudo-aleatoires qui
 suit la loi 
\begin_inset Formula $N(1;3)$
\end_inset

 bien satisfont à la loi 
\begin_inset Formula $N(1;3)$
\end_inset

.
\end_layout

\begin_layout Part*

\end_layout

\end_body
\end_document
